import { Scenes, Markup } from "telegraf";
import { addTaskDB, connectDatabase, getTasksCount, getUserTasks } from '../database.js'



export const callbacks = (bot) => {
    bot.action('quickStart', async (ctx) => {
        await ctx.answerCbQuery();
        await ctx.editMessageCaption(`
    üöÄ <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>

    1. –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –Ω–∞–∂–º–∏ <b>"üìù –°–æ–∑–¥–∞—Ç—å"</b> –∏–ª–∏ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:
       <code>/addtask</code>

    2. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:
       <b>"üóÇ –°–ø–∏—Å–æ–∫"</b> –∏–ª–∏ <code>/list</code>

    3. –£–¥–∞–ª–∏—Ç—å:
       –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–π–¥–∏—Ç–µ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –≤—ã–±–µ—Ä–∏—Ç–µ –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ –∏ –Ω–∞–∂–º–∏—Ç–µ <b>"üóë –£–¥–∞–ª–∏—Ç—å"</b> –∏–ª–∏ <code>/deletetask</code>.
        `, {parse_mode: 'HTML', reply_markup: {
            inline_keyboard: [
                [{text: 'üß≠ –ù–∞–∑–∞–¥', callback_data: 'return_to_menu'}]
            ]
        }});
    });


    bot.action('help', async(ctx) => {
        await ctx.answerCbQuery();
        await ctx.editMessageCaption(`
ü§ñ <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b> üìã

‚úèÔ∏è <b>/addtask</b> - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
üóëÔ∏è <b>/deletetask</b> - —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
üìã <b>/list</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
‚ö° <b>/fast</b> - –±—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

‚ÑπÔ∏è –≠—Ç–æ –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏.
        `, {parse_mode: 'HTML', disable_web_page_preview: true, reply_markup: {
            inline_keyboard: [
                [{text: 'üß≠ –ù–∞–∑–∞–¥', callback_data: 'return_to_menu'}]
            ]
        }});
    });


    bot.action('return_to_menu', async(ctx) => {
        await ctx.answerCbQuery();
        await ctx.editMessageCaption(`

üéâ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${ctx.from.first_name}!</b> üéâ

–Ø - <b>–£–º–Ω—ã–π –Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—å</b> ü§ñ

<b>–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
‚Ä¢ üìå –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å —Ç–æ—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º
‚Ä¢ üìã –£–¥–æ–±–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º
‚Ä¢ ‚è∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n

                    `,
                        {parse_mode: 'HTML',
                        protect_content: true,
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '‚ú® –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É', callback_data: 'quickStart' }],
                                [
                                    { text: 'üìù –°–æ–∑–¥–∞—Ç—å', callback_data: 'addTask' },
                                    { text: 'üóÇ –°–ø–∏—Å–æ–∫', callback_data: 'listTask' }
                                ],
                                [
                                    { text: 'üÜò –ü–æ–º–æ—â—å', callback_data: 'help' },
                                    { text: 'üí¨ C–≤—è–∑—å', url: 'https://t.me/neowarnawsku' }
                                ]
                            ]
                        }
                    }
                );
    }
);
}



export const addTaskScene = new Scenes.WizardScene(
        'ADD_TASK_WIZARD',
        async(ctx) => {
            await ctx.reply('<b>üå† –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b>', { parse_mode: 'HTML' });
            return ctx.wizard.next();
        },

        async(ctx) => {
            ctx.wizard.state.taskText = ctx.message.text;
            await ctx.reply('<b>üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì (–ù–∞–ø—Ä–∏–º–µ—Ä: 13.06.27)</b>', { parse_mode: 'HTML' });
            return ctx.wizard.next();
        },

        async(ctx) => {
            ctx.wizard.state.taskDate = ctx.message.text;
            const testValidDate =  await validateDate(ctx.wizard.state.taskDate)

            if(testValidDate === false){
                await ctx.reply(`<b>üìõ –í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ üîÑ</b>`, { parse_mode: 'HTML' })
                return
            }
            if(testValidDate === true){
            await ctx.reply('<b>‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ß–ß:–ú–ú (–ü—Ä–∏–º–µ—Ä: 23:43)</b>', { parse_mode: 'HTML' });
            return ctx.wizard.next();}
        },

        async(ctx) => {
            ctx.wizard.state.taskTime = ctx.message.text;
            const testValidTime = await validateTime(ctx.wizard.state.taskDate, ctx.wizard.state.taskTime)

            if(testValidTime === false){
                await ctx.reply(`<b>üìõ –í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ üîÑ</b>`, { parse_mode: 'HTML' })
                return
            }
            if(testValidTime === true){
                await ctx.replyWithHTML(`
üéâ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!</b> üéâ
                    
üìå <b>–¢–µ–∫—Å—Ç:</b>
<code><b>${ctx.wizard.state.taskText}</b></code>
                    
üóì <b>–î–∞—Ç–∞:</b>
<code><b>${ctx.wizard.state.taskDate}</b></code>
                    
‚è∞ <b>–í—Ä–µ–º—è:</b>
<code><b>${ctx.wizard.state.taskTime}</b></code>
                    
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
<i>–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è</i> üîî
                    `)
                const db = await connectDatabase();
                const dataValidFormat = convertDateFormat(ctx.wizard.state.taskDate)
                await addTaskDB(db, ctx.from.id, ctx.wizard.state.taskText, ctx.wizard.state.taskTime, dataValidFormat);
                return ctx.scene.leave();
            }
        }

    )


async function validateDate(date){
        const regex = /^(0[1-9]|[12][0-9]|3[01])\.(0[1-9]|1[0-2])\.\d{2}$/;
        if (!regex.test(date)) {
            return false
        }
    
        const [day, month, year] = date.split('.').map(Number);
    

        const inputDate = new Date(year + 2000, month - 1, day);
        const currentDate = new Date();

        currentDate.setHours(0, 0, 0, 0);

        if (inputDate < currentDate) {
            return false
        }
        return true
    }


async function validateTime(date, time){
    const regex = /^([01]\d|2[0-3]):([0-5]\d)$/;
    if (!regex.test(time)) {
        return false;
    }

    const [day, month, year] = date.split('.').map(Number);
    const [hours, minutes] = time.split(':').map(Number);

    const inputDate = new Date(year + 2000, month - 1, day, hours, minutes);
    const currentDate = new Date();

    if (inputDate.toDateString() === currentDate.toDateString() && inputDate <= currentDate) {
        return false;
    }
    return true;
}


function convertDateFormat(dateString) {
    const [day, month, year] = dateString.split('.');
    
    const formattedYear = `20${year}`;
    const formattedMonth = month.padStart(2, '0');
    const formattedDay = day.padStart(2, '0');
    
    return `${formattedYear}-${formattedMonth}-${formattedDay}`;
}


export const addTask = (bot) => {
    bot.action('addTask', async(ctx) => {
        ctx.scene.enter('ADD_TASK_WIZARD')
    })
}


export function setupListHandlers(bot, db) {
    const userPages = new Map();

    bot.action('listTask', async (ctx) => {
        try {
            const userId = ctx.from.id;
            userPages.set(userId, 1);
            await showTasksPage(ctx, db, userId);
            await ctx.answerCbQuery();
        } catch (error) {
            console.error('List error:', error);
            await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á');
        }
    });

    bot.action(/^task_page_(\d+)$/, async (ctx) => {
        const userId = ctx.from.id;
        const page = parseInt(ctx.match[1]);
        userPages.set(userId, page);
        await showTasksPage(ctx, db, userId);
        await ctx.answerCbQuery();
    });

    bot.action('task_close', async (ctx) => {
        await ctx.deleteMessage();
        await ctx.answerCbQuery();
    });

    async function showTasksPage(ctx, db, userId) {
        const currentPage = userPages.get(userId) || 1;
        const tasks = await getUserTasks(db, userId, currentPage);
        const totalCount = await getTasksCount(db, userId);
        const totalPages = Math.ceil(totalCount / 8);

        if (tasks.length === 0) {
            return await ctx.reply('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á.');
        }

        const taskButtons = tasks.map(task => [
            { 
                text: `üìå ${task.task.slice(0, 30)} (${task.reminder_date} ${task.reminder_time})`,
                callback_data: `task_detail_${task.id}`
            }
        ]);

        const paginationButtons = [];
        if (currentPage > 1) {
            paginationButtons.push({
                text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥',
                callback_data: `task_page_${currentPage - 1}`
            });
        }
        if (currentPage < totalPages) {
            paginationButtons.push({
                text: '–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è',
                callback_data: `task_page_${currentPage + 1}`
            });
        }

        const keyboard = [
            ...taskButtons,
            ...(paginationButtons.length ? [paginationButtons] : []),
            [{ text: '‚ùå –ó–∞–∫—Ä—ã—Ç—å', callback_data: 'task_close' }]
        ];

        const messageText = `üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${currentPage} –∏–∑ ${totalPages}):`;
        
        try {
            if (ctx.updateType === 'message' || !ctx.callbackQuery?.message?.text) {
                await ctx.reply(messageText, {
                    reply_markup: { inline_keyboard: keyboard }
                });
            } 
            else if (ctx.callbackQuery.message.text) {
                await ctx.editMessageText(messageText, {
                    reply_markup: { inline_keyboard: keyboard }
                });
            }
            else {
                await ctx.reply(messageText, {
                    reply_markup: { inline_keyboard: keyboard }
                });
                await ctx.deleteMessage();
            }
        } catch (editError) {
            console.error('Edit error:', editError);
            await ctx.reply(messageText, {
                reply_markup: { inline_keyboard: keyboard }
            });
        }
    }

    bot.action(/^task_detail_(\d+)$/, async (ctx) => {
        await ctx.answerCbQuery(`–ó–∞–¥–∞—á–∞ #${ctx.match[1]} –≤—ã–±—Ä–∞–Ω–∞`);
    });
}